buildscript {
  repositories {
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
  }
  dependencies {
    classpath 'com.gradle.publish:plugin-publish-plugin:0.9.6'
  }
}

plugins {
    id 'java'
    id 'java-gradle-plugin'
    id 'org.ajoberstar.grgit' version '1.6.0'
}

apply plugin: 'com.gradle.plugin-publish'

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint'
}

repositories {
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile "ws.doerr.projects.emailtemplates:EmailTemplateLibrary:0.3.1"
}

version = "${version}"
group = "ws.doerr.projects.emailtemplates"

gradlePlugin {
    plugins {
        emailTemplatePlugin {
            id = "ws.doerr.projects.emailtemplates.gradleplugin"
            implementationClass = "ws.doerr.projects.emailtemplates.gradle.EmailTemplatePlugin"
        }
    }
}

pluginBundle {
    // These settings are set for the whole plugin bundle
    website = 'http://gdoerr.github.io/CssInliner/'
    vcsUrl = 'https://github.com/gdoerr/gradleemailtemplate'

    // tags and description can be set for the whole bundle here, but can also
    // be set / overridden in the config for specific plugins
    description = 'Gradle Email Template Plugin'

    plugins {
        emailTemplatePlugin {
            id = 'ws.doerr.projects.emailtemplates.gradleplugin'
            displayName = 'Gradle Email Template plugin'
            tags = ['email', 'template', 'handlebars', 'mandrill', 'plugin']
        }
    }
}

task extractGit {
    def grgit = org.ajoberstar.grgit.Grgit.open(project.rootDir)
}

//
// Configure the MANIFEST.MF
//
jar {
    manifest {
        attributes\
            'Project': "${rootProject.name}",
            'Build-By': System.getProperty('user.name'),
            'Build-Date': new Date(),
            'Build-JDK': System.getProperty('java.version'),
            'Build-Host': java.net.InetAddress.getLocalHost().getHostName(),
            'Build-Gradle': GradleVersion.current().toString(),
            'Repo': grgit.remote.list().getAt(0).url ?: '',
            'Version': version ?: '',
            'Branch': grgit.status().clean ? grgit.branch.getCurrent().name : 'DEVELOPMENT',
            'CommitId': grgit.status().clean ? grgit.head().id : 'DEVELOPMENT',
            'CommitDate': grgit.status().clean ? grgit.head().date : 'DEVELOPMENT',
            'License': 'MIT'
    }
}

jar.dependsOn extractGit
